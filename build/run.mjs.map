{
  "version": 3,
  "sources": ["../src/run.ts"],
  "sourcesContent": ["import { OpenAI } from \"openai\";\n\nimport { Assistant, Context } from \"./index.js\";\nimport { Thread } from \"./thread.js\";\nimport { createWrappedPage, StatefulObject } from \"./utils.js\";\n\nconst POLL_INTERVAL_MS = 750;\nconst POLL_TIMEOUT_MS = 1000 * 60 * 2; // 2 minutes\n\nexport interface RunEvents {\n  statusChanged: (status: RunStatus) => void;\n  actionRequired: (\n    action: OpenAI.Beta.Threads.Runs.Run[\"required_action\"],\n  ) => void;\n  finished: (err: unknown, status: RunStatus | null) => void;\n}\n\nexport type RunStatus = OpenAI.Beta.Threads.Runs.Run[\"status\"];\n\nexport class Run extends StatefulObject<\n  Run,\n  OpenAI.Beta.Threads.Runs.Run,\n  RunEvents\n> {\n  private _pollInterval: ReturnType<typeof setInterval> | null = null;\n  private _pollStartTime = 0;\n\n  constructor(\n    ctx: Context,\n    public thread: Thread,\n    id: string,\n  ) {\n    super(ctx, Run.object, id);\n  }\n\n  static readonly object = \"run\";\n  readonly object = Run.object;\n\n  /** Retrieves from cache or fetches if missing, then begins polling. */\n  async load(options?: OpenAI.RequestOptions) {\n    await super.load(options);\n    this.beginPolling();\n  }\n\n  /** Creates a Run and begins a polling process to check its status. */\n  static async create(\n    ctx: Context,\n    thread: Thread,\n    params: RunCreateParams,\n    options: OpenAI.RequestOptions = {},\n  ) {\n    const { assistant, ...rest } = params;\n    const runParams = { ...rest, assistant_id: assistant.id };\n\n    const run = await ctx.client.beta.threads.runs.create(\n      thread.id,\n      runParams,\n      options,\n    );\n    ctx.cache.set(this.object, run.id, run);\n    ctx.cache._emit(\"created\", this.object, run.id, run);\n    const created = new Run(ctx, thread, run.id);\n    created.beginPolling();\n    return created;\n  }\n\n  /** Constructs a new Run object by fetching by id or returning from cache if already present. */\n  static async load(\n    ctx: Context,\n    thread: Thread,\n    id: string,\n    options?: OpenAI.RequestOptions,\n  ) {\n    const run = new Run(ctx, thread, id);\n    await run.load(options);\n    return run;\n  }\n\n  /**\n   * Returns a list of Runs from a Thread.\n   */\n  static async list(\n    ctx: Context,\n    thread: Thread,\n    options: OpenAI.RequestOptions = {},\n  ) {\n    const page = await ctx.client.beta.threads.runs.list(\n      thread.id,\n      ctx._opts(options),\n    );\n    return createWrappedPage(ctx, page, (ctx, id) => new Run(ctx, thread, id));\n  }\n\n  /** Modifies this Run */\n  async update(\n    params: OpenAI.Beta.Threads.RunUpdateParams,\n    options: OpenAI.RequestOptions = {},\n  ) {\n    const result = await this._ctx.client.beta.threads.runs.update(\n      this.thread.id,\n      this.id,\n      params,\n      options,\n    );\n    this._cache.set(this.object, this.id, result);\n    return this;\n  }\n\n  /** Cancels this Run */\n  async cancel(options: OpenAI.RequestOptions = {}) {\n    const result = await this._ctx.client.beta.threads.runs.cancel(\n      this.thread.id,\n      this.id,\n      options,\n    );\n    this._cache.set(this.object, this.id, result);\n    return this;\n  }\n\n  /**\n   * Submits tool outputs to this Run.\n   */\n  async submitToolOutputs(\n    params: OpenAI.Beta.Threads.RunSubmitToolOutputsParams,\n    options: OpenAI.RequestOptions = {},\n  ) {\n    const result = await this._ctx.client.beta.threads.runs.submitToolOutputs(\n      this.thread.id,\n      this.id,\n      params,\n      options,\n    );\n    this._cache.set(this.object, this.id, result);\n    return this;\n  }\n\n  /**\n   * Returns a list of steps from this Run. Steps aren't cached.\n   */\n  async listSteps(options: OpenAI.RequestOptions = {}) {\n    const page = await this._ctx.client.beta.threads.runs.steps.list(\n      this.thread.id,\n      this.id,\n      options,\n    );\n    return page;\n  }\n\n  /**\n   * Gets a step by id. Steps aren't cached.\n   */\n  async fetchStep(id: string, options: OpenAI.RequestOptions = {}) {\n    const step = await this._ctx.client.beta.threads.runs.steps.retrieve(\n      this.thread.id,\n      this.id,\n      id,\n      options,\n    );\n    return step;\n  }\n\n  /**\n   * Waits until this emitter emits a finished event, then returns the status.\n   */\n  async waitUntilFinished() {\n    if (this._pollInterval === null) {\n      this.beginPolling();\n    }\n    return new Promise<RunStatus>((resolve, reject) => {\n      this.once(\"finished\", (err, status) => {\n        if (err) reject(err);\n        else resolve(status!);\n      });\n    });\n  }\n\n  /**\n   * Polls the Run until it has finished. Emits events when the status changes.\n   *\n   * Note - for requires_action status, the actionRequired event will be emitted, then you can call submitToolOutputs()\n   */\n  beginPolling(options: OpenAI.RequestOptions = {}) {\n    // Clear existing polling interval if it exists\n    this.endPolling();\n\n    // Start timer\n    this._pollStartTime = Date.now();\n    // Begin polling interval\n    this._pollInterval = setInterval(async () => {\n      // Check if polling has timed out and exit if so\n      const elapsed = Date.now() - this._pollStartTime;\n      if (elapsed > POLL_TIMEOUT_MS) {\n        this.endPolling();\n        this.emit(\n          \"finished\",\n          new Error(\n            `Polling for Run id ${this.id} timed out after ${\n              POLL_TIMEOUT_MS / 1000\n            } seconds`,\n          ),\n          null,\n        );\n        return;\n      }\n\n      // Fetch the run and emit events if the status has changed\n      const oldRun = this.wrappedValue;\n      let run: OpenAI.Beta.Threads.Runs.Run;\n      try {\n        run = await this._ctx.cache.fetch<OpenAI.Beta.Threads.Runs.Run>(\n          Run.object,\n          { id: this.id, threadId: this.thread.id },\n          options,\n        );\n      } catch (err) {\n        console.error(`Error fetching Run id ${this.id} during polling:`, err);\n        this.emit(\"finished\", err, null);\n        this.endPolling();\n        return;\n      }\n      if (run.status !== oldRun.status) this.emit(\"statusChanged\", run.status);\n\n      // Emit actionRequired event if the run requires action\n      if (run.status === \"requires_action\") {\n        this.emit(\"actionRequired\", run.required_action);\n      }\n\n      // Emit finished event if the run has finished and end polling\n      const exitStatuses: RunStatus[] = [\n        \"cancelled\",\n        \"expired\",\n        \"completed\",\n        \"failed\",\n      ];\n      if (exitStatuses.includes(run.status)) {\n        this.endPolling();\n        await this.thread.fetch();\n        this.emit(\"finished\", null, run.status);\n        return;\n      }\n    }, POLL_INTERVAL_MS);\n  }\n\n  endPolling() {\n    clearInterval(this._pollInterval!);\n    this._pollInterval = null;\n    this._pollStartTime = 0;\n  }\n}\n\nexport interface RunCreateParams\n  extends Omit<OpenAI.Beta.Threads.RunCreateParams, \"assistant_id\"> {\n  assistant: Assistant;\n}\n"],
  "mappings": "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",
  "names": ["ctx"]
}
