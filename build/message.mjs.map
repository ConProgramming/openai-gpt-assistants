{
  "version": 3,
  "sources": ["../src/message.ts"],
  "sourcesContent": ["import { OpenAI } from \"openai\";\n\nimport { Assistant, Context } from \"./index.js\";\nimport { Run } from \"./run.js\";\nimport { Thread } from \"./thread.js\";\nimport { createWrappedPage, StatefulObject } from \"./utils.js\";\n\nexport interface MessageEvents {}\n\nexport class Message extends StatefulObject<\n  Message,\n  OpenAI.Beta.Threads.Messages.ThreadMessage,\n  MessageEvents\n> {\n  constructor(\n    ctx: Context,\n    public thread: Thread,\n    id: string,\n  ) {\n    super(ctx, Message.object, id);\n  }\n\n  static readonly object = \"message\";\n  readonly object = Message.object;\n\n  get createdAt() {\n    return new Date(this.wrappedValue.created_at * 1000);\n  }\n  get content() {\n    return this.wrappedValue.content;\n  }\n  get assistant() {\n    return this.wrappedValue.assistant_id\n      ? new Assistant(this._ctx, this.wrappedValue.assistant_id)\n      : null;\n  }\n  get fileIds() {\n    return this.wrappedValue.file_ids;\n  }\n  get metadata() {\n    return this.wrappedValue.metadata;\n  }\n  get role() {\n    return this.wrappedValue.role;\n  }\n  get run() {\n    return this.wrappedValue.run_id\n      ? new Run(this._ctx, this.thread, this.wrappedValue.run_id)\n      : null;\n  }\n\n  /** Creates a message */\n  static async create(\n    ctx: Context,\n    thread: Thread,\n    params: OpenAI.Beta.Threads.MessageCreateParams,\n    options: OpenAI.RequestOptions = {},\n  ) {\n    const message = await ctx.client.beta.threads.messages.create(\n      thread.id,\n      params,\n      options,\n    );\n    ctx.cache.set(this.object, message.id, message);\n    ctx.cache._emit(\"created\", this.object, message.id, message);\n    const created = new Message(ctx, thread, message.id);\n    return created;\n  }\n\n  /** Constructs a new Message object by fetching by id or returning from cache if already present. */\n  static async load(\n    ctx: Context,\n    thread: Thread,\n    id: string,\n    options?: OpenAI.RequestOptions,\n  ) {\n    const message = new Message(ctx, thread, id);\n    await message.load(options);\n    return message;\n  }\n\n  /** Modifies a message */\n  async update(\n    params: OpenAI.Beta.Threads.MessageUpdateParams,\n    options: OpenAI.RequestOptions = {},\n  ) {\n    const result = await this._ctx.client.beta.threads.messages.update(\n      this.thread.id,\n      this.id,\n      params,\n      options,\n    );\n    this._cache.set(this.object, this.id, result);\n    return this;\n  }\n\n  /**\n   * Returns a list of messages from a thread.\n   */\n  static async list(\n    ctx: Context,\n    thread: Thread,\n    options: OpenAI.RequestOptions = {},\n  ) {\n    const page = await ctx.client.beta.threads.messages.list(\n      thread.id,\n      ctx._opts(options),\n    );\n    return createWrappedPage(\n      ctx,\n      page,\n      (ctx, id) => new Message(ctx, thread, id),\n    );\n  }\n\n  /**\n   * Returns a list of files from a message. Files aren't cached.\n   */\n  async listFiles(\n    query?: OpenAI.Beta.Threads.Messages.Files.FileListParams,\n    options: OpenAI.RequestOptions = {},\n  ) {\n    const page = await this._ctx.client.beta.threads.messages.files.list(\n      this.thread.id,\n      this.id,\n      query,\n      this._ctx._opts(options),\n    );\n    return page;\n  }\n\n  /**\n   * Gets a file by id. Files aren't cached.\n   */\n  async fetchFile(id: string, options: OpenAI.RequestOptions = {}) {\n    const file = await this._ctx.client.beta.threads.messages.files.retrieve(\n      this.thread.id,\n      this.id,\n      id,\n      this._ctx._opts(options),\n    );\n    return file;\n  }\n}\n"],
  "mappings": "AAEA,SAAS,iBAA0B;AACnC,SAAS,WAAW;AAEpB,SAAS,mBAAmB,sBAAsB;AAI3C,MAAM,gBAAgB,eAI3B;AAAA,EACA,YACE,KACO,QACP,IACA;AACA,UAAM,KAAK,QAAQ,QAAQ,EAAE;AAHtB;AAAA,EAIT;AAAA,EAEA,OAAgB,SAAS;AAAA,EAChB,SAAS,QAAQ;AAAA,EAE1B,IAAI,YAAY;AACd,WAAO,IAAI,KAAK,KAAK,aAAa,aAAa,GAAI;AAAA,EACrD;AAAA,EACA,IAAI,UAAU;AACZ,WAAO,KAAK,aAAa;AAAA,EAC3B;AAAA,EACA,IAAI,YAAY;AACd,WAAO,KAAK,aAAa,eACrB,IAAI,UAAU,KAAK,MAAM,KAAK,aAAa,YAAY,IACvD;AAAA,EACN;AAAA,EACA,IAAI,UAAU;AACZ,WAAO,KAAK,aAAa;AAAA,EAC3B;AAAA,EACA,IAAI,WAAW;AACb,WAAO,KAAK,aAAa;AAAA,EAC3B;AAAA,EACA,IAAI,OAAO;AACT,WAAO,KAAK,aAAa;AAAA,EAC3B;AAAA,EACA,IAAI,MAAM;AACR,WAAO,KAAK,aAAa,SACrB,IAAI,IAAI,KAAK,MAAM,KAAK,QAAQ,KAAK,aAAa,MAAM,IACxD;AAAA,EACN;AAAA;AAAA,EAGA,aAAa,OACX,KACA,QACA,QACA,UAAiC,CAAC,GAClC;AACA,UAAM,UAAU,MAAM,IAAI,OAAO,KAAK,QAAQ,SAAS;AAAA,MACrD,OAAO;AAAA,MACP;AAAA,MACA;AAAA,IACF;AACA,QAAI,MAAM,IAAI,KAAK,QAAQ,QAAQ,IAAI,OAAO;AAC9C,QAAI,MAAM,MAAM,WAAW,KAAK,QAAQ,QAAQ,IAAI,OAAO;AAC3D,UAAM,UAAU,IAAI,QAAQ,KAAK,QAAQ,QAAQ,EAAE;AACnD,WAAO;AAAA,EACT;AAAA;AAAA,EAGA,aAAa,KACX,KACA,QACA,IACA,SACA;AACA,UAAM,UAAU,IAAI,QAAQ,KAAK,QAAQ,EAAE;AAC3C,UAAM,QAAQ,KAAK,OAAO;AAC1B,WAAO;AAAA,EACT;AAAA;AAAA,EAGA,MAAM,OACJ,QACA,UAAiC,CAAC,GAClC;AACA,UAAM,SAAS,MAAM,KAAK,KAAK,OAAO,KAAK,QAAQ,SAAS;AAAA,MAC1D,KAAK,OAAO;AAAA,MACZ,KAAK;AAAA,MACL;AAAA,MACA;AAAA,IACF;AACA,SAAK,OAAO,IAAI,KAAK,QAAQ,KAAK,IAAI,MAAM;AAC5C,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa,KACX,KACA,QACA,UAAiC,CAAC,GAClC;AACA,UAAM,OAAO,MAAM,IAAI,OAAO,KAAK,QAAQ,SAAS;AAAA,MAClD,OAAO;AAAA,MACP,IAAI,MAAM,OAAO;AAAA,IACnB;AACA,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA,CAACA,MAAK,OAAO,IAAI,QAAQA,MAAK,QAAQ,EAAE;AAAA,IAC1C;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,UACJ,OACA,UAAiC,CAAC,GAClC;AACA,UAAM,OAAO,MAAM,KAAK,KAAK,OAAO,KAAK,QAAQ,SAAS,MAAM;AAAA,MAC9D,KAAK,OAAO;AAAA,MACZ,KAAK;AAAA,MACL;AAAA,MACA,KAAK,KAAK,MAAM,OAAO;AAAA,IACzB;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,UAAU,IAAY,UAAiC,CAAC,GAAG;AAC/D,UAAM,OAAO,MAAM,KAAK,KAAK,OAAO,KAAK,QAAQ,SAAS,MAAM;AAAA,MAC9D,KAAK,OAAO;AAAA,MACZ,KAAK;AAAA,MACL;AAAA,MACA,KAAK,KAAK,MAAM,OAAO;AAAA,IACzB;AACA,WAAO;AAAA,EACT;AACF;",
  "names": ["ctx"]
}
