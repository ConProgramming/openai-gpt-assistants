{
  "version": 3,
  "sources": ["../src/thread.ts"],
  "sourcesContent": ["import { OpenAI } from \"openai\";\n\nimport { Assistant, Context } from \"./index.js\";\nimport { Message } from \"./message.js\";\nimport { Run, RunCreateParams } from \"./run.js\";\nimport { StatefulObject } from \"./utils.js\";\n\nexport interface ThreadEvents {}\n\nexport class Thread extends StatefulObject<\n  Thread,\n  OpenAI.Beta.Thread,\n  ThreadEvents\n> {\n  constructor(ctx: Context, id: string) {\n    super(ctx, Thread.object, id);\n  }\n\n  static readonly object = \"thread\";\n  readonly object = Thread.object;\n  get createdAt() {\n    return new Date(this.wrappedValue.created_at * 1000);\n  }\n  get metadata() {\n    return this.wrappedValue.metadata;\n  }\n\n  /** Constructs a new Thread object by fetching by id or returning from cache if already present. */\n  static async load(ctx: Context, id: string, options?: OpenAI.RequestOptions) {\n    const thread = new Thread(ctx, id);\n    await thread.load(options);\n    return thread;\n  }\n\n  /** Creates a Thread. */\n  static async create(\n    ctx: Context,\n    params: OpenAI.Beta.ThreadCreateParams,\n    options: OpenAI.RequestOptions = {},\n  ) {\n    const thread = await ctx.client.beta.threads.create(\n      params,\n      ctx._opts(options),\n    );\n    ctx.cache.set(this.object, thread.id, thread);\n    ctx.cache._emit(\"created\", this.object, thread.id, thread);\n    return new Thread(ctx, thread.id);\n  }\n\n  /** Creates a Thread and runs it (creates a Run also). */\n  static async createAndRun(\n    ctx: Context,\n    params: ThreadCreateAndRunParams,\n    options: OpenAI.RequestOptions = {},\n  ) {\n    const { assistant, ...rest } = params;\n    const runParams = { ...rest, assistant_id: assistant.id };\n\n    // Create the run and thread\n    const _run = await ctx.client.beta.threads.createAndRun(\n      runParams,\n      ctx._opts(options),\n    );\n    ctx.cache.set(Run.object, _run.id, _run);\n    const run = new Run(\n      ctx,\n      await Thread.load(ctx, _run.thread_id, options),\n      _run.id,\n    );\n    run.beginPolling();\n\n    // Emit the created events\n    ctx.cache._emit(\n      \"created\",\n      Thread.object,\n      _run.thread_id,\n      ctx.cache.get(Thread.object, _run.thread_id),\n    );\n    ctx.cache._emit(\"created\", Run.object, _run.id, _run);\n\n    return run;\n  }\n\n  /** Runs the thread. */\n  async run(assistant: Assistant, options?: OpenAI.RequestOptions) {\n    const run = await Run.create(this._ctx, this, { assistant }, options);\n    return run;\n  }\n\n  /** Modifies this Thread. */\n  async update(\n    params: OpenAI.Beta.ThreadUpdateParams,\n    options: OpenAI.RequestOptions = {},\n  ) {\n    const updated = await this._ctx.client.beta.threads.update(\n      this.wrappedValue.id,\n      params,\n      this._ctx._opts(options),\n    );\n    this._cache.set(this.object, updated.id, updated);\n    return this;\n  }\n\n  /* Creates a new message and a new run which will auto-poll for status changes. Returns a tuple. */\n  async createMessageAndRun(\n    msgParams: OpenAI.Beta.Threads.MessageCreateParams,\n    runParams: RunCreateParams,\n    options: OpenAI.RequestOptions = {},\n  ) {\n    const message = await Message.create(this._ctx, this, msgParams, options);\n    const run = await Run.create(this._ctx, this, runParams, options);\n    return [message, run] satisfies [Message, Run];\n  }\n\n  async messages(options: OpenAI.RequestOptions = {}) {\n    return await Message.list(this._ctx, this, options);\n  }\n}\n\nexport interface ThreadCreateAndRunParams\n  extends Omit<OpenAI.Beta.ThreadCreateAndRunParams, \"assistant_id\"> {\n  assistant: Assistant;\n}\n"],
  "mappings": "AAGA,SAAS,eAAe;AACxB,SAAS,WAA4B;AACrC,SAAS,sBAAsB;AAIxB,MAAM,eAAe,eAI1B;AAAA,EACA,YAAY,KAAc,IAAY;AACpC,UAAM,KAAK,OAAO,QAAQ,EAAE;AAAA,EAC9B;AAAA,EAEA,OAAgB,SAAS;AAAA,EAChB,SAAS,OAAO;AAAA,EACzB,IAAI,YAAY;AACd,WAAO,IAAI,KAAK,KAAK,aAAa,aAAa,GAAI;AAAA,EACrD;AAAA,EACA,IAAI,WAAW;AACb,WAAO,KAAK,aAAa;AAAA,EAC3B;AAAA;AAAA,EAGA,aAAa,KAAK,KAAc,IAAY,SAAiC;AAC3E,UAAM,SAAS,IAAI,OAAO,KAAK,EAAE;AACjC,UAAM,OAAO,KAAK,OAAO;AACzB,WAAO;AAAA,EACT;AAAA;AAAA,EAGA,aAAa,OACX,KACA,QACA,UAAiC,CAAC,GAClC;AACA,UAAM,SAAS,MAAM,IAAI,OAAO,KAAK,QAAQ;AAAA,MAC3C;AAAA,MACA,IAAI,MAAM,OAAO;AAAA,IACnB;AACA,QAAI,MAAM,IAAI,KAAK,QAAQ,OAAO,IAAI,MAAM;AAC5C,QAAI,MAAM,MAAM,WAAW,KAAK,QAAQ,OAAO,IAAI,MAAM;AACzD,WAAO,IAAI,OAAO,KAAK,OAAO,EAAE;AAAA,EAClC;AAAA;AAAA,EAGA,aAAa,aACX,KACA,QACA,UAAiC,CAAC,GAClC;AACA,UAAM,EAAE,WAAW,GAAG,KAAK,IAAI;AAC/B,UAAM,YAAY,EAAE,GAAG,MAAM,cAAc,UAAU,GAAG;AAGxD,UAAM,OAAO,MAAM,IAAI,OAAO,KAAK,QAAQ;AAAA,MACzC;AAAA,MACA,IAAI,MAAM,OAAO;AAAA,IACnB;AACA,QAAI,MAAM,IAAI,IAAI,QAAQ,KAAK,IAAI,IAAI;AACvC,UAAM,MAAM,IAAI;AAAA,MACd;AAAA,MACA,MAAM,OAAO,KAAK,KAAK,KAAK,WAAW,OAAO;AAAA,MAC9C,KAAK;AAAA,IACP;AACA,QAAI,aAAa;AAGjB,QAAI,MAAM;AAAA,MACR;AAAA,MACA,OAAO;AAAA,MACP,KAAK;AAAA,MACL,IAAI,MAAM,IAAI,OAAO,QAAQ,KAAK,SAAS;AAAA,IAC7C;AACA,QAAI,MAAM,MAAM,WAAW,IAAI,QAAQ,KAAK,IAAI,IAAI;AAEpD,WAAO;AAAA,EACT;AAAA;AAAA,EAGA,MAAM,IAAI,WAAsB,SAAiC;AAC/D,UAAM,MAAM,MAAM,IAAI,OAAO,KAAK,MAAM,MAAM,EAAE,UAAU,GAAG,OAAO;AACpE,WAAO;AAAA,EACT;AAAA;AAAA,EAGA,MAAM,OACJ,QACA,UAAiC,CAAC,GAClC;AACA,UAAM,UAAU,MAAM,KAAK,KAAK,OAAO,KAAK,QAAQ;AAAA,MAClD,KAAK,aAAa;AAAA,MAClB;AAAA,MACA,KAAK,KAAK,MAAM,OAAO;AAAA,IACzB;AACA,SAAK,OAAO,IAAI,KAAK,QAAQ,QAAQ,IAAI,OAAO;AAChD,WAAO;AAAA,EACT;AAAA;AAAA,EAGA,MAAM,oBACJ,WACA,WACA,UAAiC,CAAC,GAClC;AACA,UAAM,UAAU,MAAM,QAAQ,OAAO,KAAK,MAAM,MAAM,WAAW,OAAO;AACxE,UAAM,MAAM,MAAM,IAAI,OAAO,KAAK,MAAM,MAAM,WAAW,OAAO;AAChE,WAAO,CAAC,SAAS,GAAG;AAAA,EACtB;AAAA,EAEA,MAAM,SAAS,UAAiC,CAAC,GAAG;AAClD,WAAO,MAAM,QAAQ,KAAK,KAAK,MAAM,MAAM,OAAO;AAAA,EACpD;AACF;",
  "names": []
}
